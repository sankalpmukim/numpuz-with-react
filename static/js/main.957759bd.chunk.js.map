{"version":3,"sources":["Square.js","Board.js","Timer.js","utils.js","index.js"],"names":["Square","className","onClick","props","this","value","React","Component","Board","squares","slice","map","_","idx","squareClick","style","gridSize","Timer","Math","floor","time","generateInitArray","initArray","Array","from","length","index","String","sort","random","swapArrayElements","arr","indexA","indexB","temp","Game","useState","setGridSize","setSquares","won","setWon","setTime","isActive","setIsActive","useEffect","newSquares","indexOf","SIZE","sqrt","sortedArray","a","b","i","arraysEqual","console","log","interval","setInterval","clearInterval","movable","mover","BEGIN","htmlFor","type","onChange","event","Number","target","id","min","max","verticalChange","horizontalChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.957759bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nclass Square extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"square\" onClick={() => this.props.onClick()}>\r\n        {this.props.value}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\nimport Square from \"./Square\";\r\n// class Board extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       gridSize: 4,\r\n//     };\r\n//   }\r\n//   render() {\r\n//     const gridSize = this.state.gridSize;\r\n//     const squares = Array(gridSize * gridSize)\r\n//       .fill(null)\r\n//       .map((num, idx) => <Square key={idx} />);\r\n//     return <div className=\"board\">{squares}</div>;\r\n//   }\r\n// }\r\n\r\nconst Board = (props) => {\r\n  let squares = props.squares.slice();\r\n  squares = squares.map((_, idx) => (\r\n    <Square\r\n      onClick={() => props.squareClick(idx)}\r\n      key={idx}\r\n      value={squares[idx]}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"board\" style={{ \"--grid-size\": props.gridSize }}>\r\n      {squares}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst Timer = (props) => {\r\n  return (\r\n    <div className=\"timer\">\r\n      <span className=\"digits\">\r\n        {(\"0\" + Math.floor((props.time / 60000) % 60)).slice(-2)}:\r\n      </span>\r\n      <span className=\"digits\">\r\n        {(\"0\" + Math.floor((props.time / 1000) % 60)).slice(-2)}.\r\n      </span>\r\n      <span className=\"digits mili-sec\">\r\n        {(\"0\" + ((props.time / 10) % 100)).slice(-2)}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\nexport default Timer;\r\n","const generateInitArray = (gridSize) => {\r\n  const initArray = Array.from({ length: gridSize * gridSize }, (_, index) =>\r\n    String(index + 1)\r\n  );\r\n  // initArray[initArray.length - 1] = initArray.length - 1;\r\n  // initArray[initArray.length - 2] = \"##\";\r\n  // return initArray;\r\n  initArray[initArray.length - 1] = \"##\";\r\n  initArray.sort(() => Math.random() - 0.5);\r\n  return initArray;\r\n};\r\n\r\nconst swapArrayElements = (arr, indexA, indexB) => {\r\n  const temp = arr[indexA];\r\n  arr[indexA] = arr[indexB];\r\n  arr[indexB] = temp;\r\n  return arr;\r\n};\r\n\r\nconst arraysEqual = (a, b) => {\r\n  if (a === b) return true;\r\n  if (a == null || b == null) return false;\r\n  if (a.length !== b.length) return false;\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport { generateInitArray, swapArrayElements, arraysEqual };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport Board from \"./Board\";\r\nimport Timer from \"./Timer\";\r\nimport { generateInitArray, swapArrayElements, arraysEqual } from \"./utils\";\r\n\r\nconst Game = () => {\r\n  const [gridSize, setGridSize] = useState(4);\r\n  const [squares, setSquares] = useState(generateInitArray(gridSize));\r\n  const [won, setWon] = useState(false);\r\n  const [time, setTime] = useState(0);\r\n  const [isActive, setIsActive] = useState(false);\r\n  useEffect(() => {\r\n    setSquares(generateInitArray(gridSize));\r\n    setIsActive(false);\r\n  }, [gridSize]);\r\n  useEffect(() => {\r\n    const newSquares = squares.slice();\r\n    if (newSquares.indexOf(\"##\") === -1) {\r\n      setWon(true);\r\n      return;\r\n    }\r\n    const SIZE = Math.sqrt(newSquares.length);\r\n    const sortedArray = Array.from({ length: SIZE * SIZE }, (_, index) =>\r\n      String(index + 1)\r\n    );\r\n    newSquares[newSquares.indexOf(\"##\")] = String(newSquares.length);\r\n    if (arraysEqual(newSquares, sortedArray)) {\r\n      console.log(\"Game won\");\r\n      setIsActive(false);\r\n      setWon(true);\r\n      return;\r\n    }\r\n    console.log(\"Game not won\");\r\n    setWon(false);\r\n  }, [squares]);\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        setTime((time) => time + 100);\r\n      }, 100);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [isActive]);\r\n\r\n  const movable = (idx) => {\r\n    const mover = squares.indexOf(\"##\");\r\n    // Horizontal:-1\r\n    // Vertical:1\r\n    // Not possible:0\r\n    if (idx === mover) {\r\n      return 0;\r\n    }\r\n    if (idx % gridSize === mover % gridSize) {\r\n      return 1;\r\n    } else {\r\n      const BEGIN = mover - (mover % gridSize);\r\n      if (idx >= BEGIN && idx <= BEGIN + gridSize - 1) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  const verticalChange = (idx, mover) => {\r\n    // console.log(gridSize);\r\n    let newSquares = squares.slice();\r\n    if (idx < mover) {\r\n      while (newSquares.indexOf(\"##\") !== idx) {\r\n        newSquares = swapArrayElements(\r\n          newSquares,\r\n          newSquares.indexOf(\"##\"),\r\n          newSquares.indexOf(\"##\") - gridSize\r\n        );\r\n      }\r\n    } else if (idx > mover) {\r\n      while (newSquares.indexOf(\"##\") !== idx) {\r\n        // console.log(gridSize);\r\n        // console.log(newSquares);\r\n        newSquares = swapArrayElements(\r\n          newSquares,\r\n          newSquares.indexOf(\"##\"),\r\n          newSquares.indexOf(\"##\") + gridSize\r\n        );\r\n      }\r\n    }\r\n    setSquares(newSquares);\r\n  };\r\n\r\n  const horizontalChange = (idx, mover) => {\r\n    let newSquares = squares.slice();\r\n    if (idx < mover) {\r\n      while (newSquares.indexOf(\"##\") !== idx) {\r\n        newSquares = swapArrayElements(\r\n          newSquares,\r\n          newSquares.indexOf(\"##\"),\r\n          newSquares.indexOf(\"##\") - 1\r\n        );\r\n      }\r\n    } else if (idx > mover) {\r\n      while (newSquares.indexOf(\"##\") !== idx) {\r\n        newSquares = swapArrayElements(\r\n          newSquares,\r\n          newSquares.indexOf(\"##\"),\r\n          newSquares.indexOf(\"##\") + 1\r\n        );\r\n      }\r\n    }\r\n    setSquares(newSquares);\r\n  };\r\n\r\n  const handleClick = (i) => {\r\n    // console.log(i);\r\n    if (!isActive && won === false) {\r\n      setIsActive(true);\r\n      setTime(0);\r\n    }\r\n    if (movable(i) !== 0 && won === false) {\r\n      if (movable(i) === 1) {\r\n        verticalChange(i, squares.indexOf(\"##\"));\r\n      } else {\r\n        horizontalChange(i, squares.indexOf(\"##\"));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Number puzzle!</h1>\r\n      <div className=\"game\">\r\n        <div className=\"details\">\r\n          <label htmlFor=\"number\">\r\n            <h3>\r\n              Decide grid size:\r\n              <input\r\n                type=\"number\"\r\n                value={gridSize}\r\n                onChange={(event) => {\r\n                  setGridSize(Number(event.target.value));\r\n                }}\r\n                id=\"number\"\r\n                min=\"2\"\r\n                max=\"10\"\r\n              />\r\n            </h3>\r\n          </label>\r\n          <div>\r\n            <h3>{won ? \"Game won\" : \"Game not won\"}</h3>\r\n          </div>\r\n          <div>\r\n            <button\r\n              className=\"my-button\"\r\n              onClick={() => {\r\n                setSquares(generateInitArray(gridSize));\r\n                setIsActive(false);\r\n                setWon(false);\r\n                setTime(0);\r\n              }}\r\n            >\r\n              Reset board\r\n            </button>\r\n          </div>\r\n          <Timer time={time} />\r\n        </div>\r\n        <Board\r\n          squares={squares}\r\n          gridSize={gridSize}\r\n          squareClick={handleClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}